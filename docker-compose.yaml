# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# This configuration supports basic configuration using environment variables or
# an .env file.
---
version: '3'
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.0.1-python3.8}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-1000}"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  # lakefs:
  #   image: treeverse/lakefs:latest
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - "postgres"
  #   environment:
  #     - LAKEFS_BLOCKSTORE_TYPE=local
  #     - LAKEFS_AUTH_ENCRYPT_SECRET_KEY=some random secret string
  #     - LAKEFS_DATABASE_CONNECTION_STRING=postgres://airflow:airflow@postgres/lakefs?sslmode=disable
  #     - LAKEFS_BLOCKSTORE_LOCAL_PATH=/home/lakefs
  #     - LAKEFS_GATEWAYS_S3_DOMAIN_NAME=s3.local.lakefs.io:8000
  #     - LAKEFS_STATS_ENABLED
  #     - LAKEFS_LOGGING_LEVEL
  #     - LAKEFS_CATALOGER_TYPE
  #     - LAKEFS_COMMITTED_LOCAL_CACHE_DIR=/home/lakefs/.local_tier
  #     - LAKEFS_COMMITTED_LOCAL_CACHE_SIZE_BYTES
  #     - LAKEFS_COMMITTED_SSTABLE_MEMORY_CACHE_SIZE_BYTES
  #     - LAKEFS_COMMITTED_LOCAL_CACHE_RANGE_PROPORTION
  #     - LAKEFS_COMMITTED_LOCAL_CACHE_RANGE_OPEN_READERS
  #     - LAKEFS_COMMITTED_LOCAL_CACHE_RANGE_NUM_SHARDS
  #     - LAKEFS_COMMITTED_LOCAL_CACHE_METARANGE_PROPORTION
  #     - LAKEFS_COMMITTED_LOCAL_CACHE_METARANGE_OPEN_READERS
  #     - LAKEFS_COMMITTED_LOCAL_CACHE_METARANGE_NUM_SHARDS
  #     - LAKEFS_COMMITTED_PERMANENT_MIN_RANGE_SIZE_BYTES
  #     - LAKEFS_COMMITTED_PERMANENT_MAX_RANGE_SIZE_BYTES
  #     - LAKEFS_COMMITTED_PERMANENT_RANGE_RAGGEDNESS_ENTRIES
  #     - LAKEFS_COMMITTED_BLOCK_STORAGE_PREFIX
  #   entrypoint: ["/app/wait-for", "postgres:5432", "--", "/app/lakefs", "run"]

volumes:
  postgres-db-volume:
